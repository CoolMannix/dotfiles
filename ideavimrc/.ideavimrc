"==========================================
" ProjectLink: https://github.com/wklken/vim-for-server
" Author:  wklken
" Version: 0.2
" Email: wklken@yeah.net
" BlogPost: http://www.wklken.me
" Donation: http://www.wklken.me/pages/donation.html
" ReadMe: README.md
" Last_modify: 2015-07-07
" Desc: simple vim config for server, without any plugins.
"==========================================

" <leader>leader
let mapleader = ','
let g:mapleader = ','

" movement
set scrolloff=7                 " keep 3 lines when scrolling

" show
set nu                      " show line numbers
set rnu
set showmode                    " display current modes


" search
set hlsearch                    " highlight searches
set incsearch                   " do incremental searching, search as you type
set ignorecase                  " ignore case when searching
set smartcase                   " no ignorecase if Uppercase char present


" select & complete
set selection=inclusive
set selectmode=mouse,key

" ============================ key map ============================
" common key map {{{
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" kj 替换 Esc
inoremap kj <Esc>

" Quickly close the current window
nnoremap <leader>q :q<CR>
" Quickly save the current file
nnoremap <leader>w :w<CR>

" select all
map <Leader>sa ggVG"

" remap U to <C-r> for easier redo
nnoremap U <C-r>

" Swap implementations of ` and ' jump to markers
" By default, ' jumps to the marked line, ` jumps to the marked line and
" column, so swap them
nnoremap ' `
nnoremap ` '

" switch # *
" nnoremap # *
" nnoremap * #

"Keep search pattern at the center of the screen."
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" remove highlight
noremap <silent><leader>hn :nohls<CR>

"Reselect visual block after indent/outdent.调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv

" y$ -> Y Make Y behave like other capitals
map Y y$

"Map ; to : and save a million keystrokes
" ex mode commands made easy 用于快速进入命令行
nnoremap ; :

" Shift+H goto head of the line, Shift+L goto end of the line
nnoremap H ^
nnoremap L $

" save
cmap w!! w !sudo tee >/dev/null %

" command mode, ctrl-a to head， ctrl-e to tail
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
" }}}


" idea key map{{{
noremap <C-O> <ESC>:action Back<CR>
noremap <C-I> <ESC>:action Forward<CR>
noremap J <ESC>:action EditorJoinLines<CR>

" 个人习惯
noremap <leader>` <ESC>:action SelectInProjectView<CR>

" Leader key relevant
" quit
noremap <leader>q :wq<CR>
" write to favorite
noremap <leader>w <ESC>:action AddToFavoritesPopup<CR>
" error description
noremap <leader>e <ESC>:action ShowErrorDescription<CR>
" return
noremap <leader>r <ESC>:action Rerun<CR>
" Windows或者MacOS的快捷键都与t相关, 所以选择t作为键
noremap <leader>t <ESC>:action Refactorings.QuickListPopupAction<CR>
" y
"noremap <leader>y <ESC>:action <CR>
" usage
noremap <leader>u <ESC>:action ShowUsages<CR>
" import
noremap <leader>i <ESC>:action Maven.Reimport<CR>
" open file path
noremap <leader>o <ESC>:action ShowFilePath<CR>
" show projects
noremap <leader>p <ESC>:action ManageRecentProjects<CR>

" ace jump
"noremap <leader>a <ESC>:action emacsIDEAs.AceJumpWord<CR>
" structure
noremap <leader>s <ESC>:action FileStructurePopup<CR>
" debug option
noremap <leader>d <ESC>:action ChooseDebugConfiguration<CR>
" 同样也是debug，因为d已经被ChooseDebugConfiguration占领, 所以就放在了d键隔壁.
noremap <leader>f <ESC>:action DebugClass<CR>
" g
noremap <leader>g <ESC>:action Generate<CR>
" hide all
noremap <leader>h <ESC>:action HideAllWindows<CR>
" jump to next error
noremap <leader>j <ESC>:action GotoNextError<CR>
" jump to previous error，就近原则
noremap <leader>k <ESC>:action GotoPreviousError<CR>
" light up
noremap <leader>l <ESC>:action HighlightUsagesInFile<CR>
" 粘贴最近复制寄存器
noremap <leader>; "0p

" 本行皆为debug所用
" resume - z
noremap <leader>z <ESC>:action Resume<CR>
" step over
noremap <leader>x <ESC>:action StepOver<CR>
" step into
noremap <leader>c <ESC>:action SmartStepInto<CR>
" evaluate expression - v
noremap <leader>v <ESC>:action EvaluateExpression<CR>
" breakpoints
noremap <leader>b <ESC>:action ViewBreakpoints<CR>
" 因为属于breakpoint范畴的功能, 所以就选择了b和m的隔壁
noremap <leader>n <ESC>:action ToggleLineBreakpoint<CR>
" mute breakpoints
noremap <leader>m <ESC>:action XDebugger.MuteBreakpoints<CR>

" g key relevant
"
" q
"noremap gq <ESC>:action <CR>
" switcher
noremap gw <ESC>:action RecentFiles<CR>
" e
"noremap ge <ESC>:action <CR>
" r
"noremap gr <ESC>:action <CR>
" translator(third party plugin)
noremap gt <ESC>:action $EditorTranslateAction<CR>
" y
noremap gy <ESC>:action CopyReference<CR>
" u
"noremap gu <ESC>:action <CR>
" intention
noremap gi <ESC>:action ShowIntentionActions<CR>
" o
"noremap go <ESC>:action <CR>
" param info
noremap gp <ESC>:action ParameterInfo<CR>

" a
"noremap ga <ESC>:action <CR>
" goto source
noremap gs <ESC>:action GotoImplementation<CR>
" goto declaration
noremap gd <ESC>:action GotoDeclaration<CR>
" goto file
noremap gf <ESC>:action GotoFile<CR>
" g
"noremap gg <ESC>:action MUST_NOT_BE_CHANGED!!!<CR>
" hierarchy
noremap ghc <ESC>:action CallHierarchy<CR>
noremap ght <ESC>:action TypeHierarchy<CR>
noremap ghm <ESC>:action MethodHierarchy<CR>
" j analyze data flow in
noremap gj <ESC>:action SliceBackward<CR>
" k analyze data flow out
noremap gk <ESC>:action SliceForward<CR>
" l
"noremap gl <ESC>:action <CR>

" z
"noremap gz <ESC>:action <CR>
" close all but this
noremap gx <ESC>:action CloseAllEditorsButActive<CR>
" compile
noremap gc <ESC>:action CompileDirty<CR>
" v
"noremap gv <ESC>:action <CR>
" b
"noremap gb <ESC>:action FindBugs.CurrentFileAction<CR>
" goto class
noremap gn <ESC>:action GotoClass<CR>
" goto method
noremap gm <ESC>:action GotoSymbol<CR>

" \ also works
"noremap \q <ESC>:action <CR>
" refresh
noremap \r <ESC>:source ~/.ideavimrc<CR>
" uml popup
noremap \u <ESC>:action ShowUmlDiagramPopup<CR>
" git flow
"noremap \[ <ESC>:action Gitflow.OpenGitflowPopup<CR>
" Vcs
noremap \] <ESC>:action Vcs.QuickListPopupAction<CR>

" global find
noremap g/ <ESC>:action FindInPath<CR>
" gloaal replace
noremap g' <ESC>:action ReplaceInPath<CR>
" find
noremap / <ESC>:action Find<CR>
" replace
noremap ' <ESC>:action Replace<CR>
" previous method
noremap [[ <ESC>:action MethodUp<CR>
" next method
noremap ]] <ESC>:action MethodDown<CR>
" }}}


set keep-english-in-normal-and-restore-in-insert
set easymotion
set surround
set multiple-cursors
